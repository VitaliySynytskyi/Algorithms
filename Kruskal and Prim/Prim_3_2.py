"""Код реалізації алгоритму Пріма для пошуку мінімального скелету графа"""

import math

def get_mir(R, U):
    rm = (math.inf, -1, -1)
    for v in U:
        rr = min(R, key=lambda x: x[0] if (x[1] == v or x[2] == v) and (x[1] not in U or x[2] not in U) else math.inf)
        if rm[0] > rr[0]:
            rm = rr
    return rm


R = [(math.inf, -1, -1), (13,1,2), (18,1,3), (17,1,4), (14,1,5), (22,1,6),(26,2,3),(22,2,5),(3,3,4),(19,4,6)]
#Список ребер графа(Довжина, вершина 1 і вершина 2)
#Перше значення повертається, якщо немає мінімальних ребер

N = 6   #число вершин графа
U = {1} #множина з'єднання вершин
T = []  #список ребер скелета

while len(U) < N:
    r = get_mir(R, U)      # ребро з мінімальною вагою
    if r[0] == math.inf:   # якщо ребер немає то скелет построєний
        break

    T.append(r)   # Додавання ребра в скелет
    U.add(r[1])   # додавання вершини в множині U
    U.add(r[2])
print(T)
